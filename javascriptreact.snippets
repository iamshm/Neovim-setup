snippet rfc "React function component" b
import React,{useState} from 'react';
	import styles from './$1.module.css'
	export default function ${1:ComponentName} () {
		return (
			<div>
				$1
			</div>
		);
	}
endsnippet

snippet rcc "React Class component" b
	import React from 'react';
	export default class ${1:ClassName} extends React.Component {
		state = {

		}
		render() {
			return (
				<div>
					$1
				</div>
			);
		}
	}
endsnippet

snippet cl "Console log" b
console/log();
endsnippet

snippet useS "useState Hook" b
const [${1}, set`!p snip.rv=t[1].title()`] = useState(${3:"${4}"})
endsnippet

snippet useE "useEffect Hook" b
useEffect(() => {
	${1:${0}}
		}${2})
endsnippet

snippet useC "useContext Hook" b
const ${1:context} = useContext(${2})
endsnippet

snippet useRe "useReducer Hook" b
const [${3:state}, ${4:dispatch}] = useReducer(${5:reducer}, ${2:initial_value})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback((${2})) => ${3:{
	${4}
}}, [${5}])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memorized} = useMemo(() => ${2:{
	${3}
}}, [${4}])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet

snippet ctor "constructor" b
	constructor() {
		super();
		${1}
	}
endsnippet

snippet ir "import React"
	import React from 'react';
endsnippet

snippet ird "im React dom" b
	import ReactDOM from 'react-dom';
endsnippet
snippet cdm "componentDidMount" b
	componentDidMount() {
		${1}
	}
endsnippet

snippet cdup "componentDidUpdate" b
	componentDidUpdate(prevProps, prevState) {
		${1}
	}
endsnippet
snippet cwm "componentWillMount" b
	componentWillMount() {
		${1}
	}
endsnippet
snippet cwr "componentWillReceiveProps" b
	componentWillReceiveProps(nextProps) {
		${1}
	}
endsnippet
snippet cwun "componentWillUnmount" b
	componentWillUnmount() {
		${1}
	}
endsnippet
snippet cwu "componentWillUpdate" b
	componentWillUpdate(nextProps, nextState) {
		${1}
	}
endsnippet

snippet ren "render" b
	render() {
		return (
			${1:<div />}
		);
	}
endsnippet
snippet scu "should comp upd" b
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}
endsnippet 
